# -*- mode:sh -*-
# Helper functions when dealing with syspart'ed system

# Helps show which processes are still in the root cpuset and which have
# been properly moved to the par0 set.
comm_cpusets() {
    local set1=${1:-/cpusets/cgroup.procs}
    local set2=${2:-/cpusets/par0/cgroup.procs}
    echo "${set1} - ${set2}"
    ORIG_IFS=$IFS
    IFS='
'
    TAB=$(printf "\t")
    sort -n $set1 > /tmp/.set1_$$
    sort -n $set2 > /tmp/.set2_$$
    comm --nocheck-order -3 /tmp/.set1_$$ /tmp/.set2_$$ | \
        while read line; do
        echo -n "$line - "
        ps --no-headers -o args -p ${line##${TAB}}
    done
    IFS=$ORIG_IFS
    /bin/rm /tmp/.set*_$$
}

# Watch for new kernel threads to be spawned.
function watch_kernel_threads() {
    declare -A kernelthreads
    for pid in $(ps -e -o pid,args | awk '$2 ~- /^\[/ { print $1 }'); do
        kernelthreads[$pid]=1
    done
    while :; do
        sleep 1
        for pid in $(ps -e -o pid,args | awk '$2 ~- /^\[/ { print $1 }'); do
            if [ -z "${kernelthreads[$pid]}" ]; then
                CPUSET=$(taskset -c -p $pid | awk -F: '{ print $2 }')
                printf "%s: New kernel thread %-5s %s with cpuset: %s\n" \
                    $(date +%F_%T) \
                    $(ps --no-headers -o args -p ${pid}) $pid $CPUSET
                kernelthreads[$pid]=1
            fi
        done
    done
}

# List out processes which have last executed on the isolated
# processors. This is another useful technique to look for processes that
# are perhaps not isolated in the par0 cpuset.
ls_isolated_procs() {
    if $(systemctl is-enabled syspart >/dev/null); then
        source /etc/sysconfig/syspart
        ps -e -o pid,psr,args | \
            awk -vR=[$PAR0_CPUS] '{ if (match($2, R) == 0 && $3 !~ /^\[/) print $0 }'
    fi
}
