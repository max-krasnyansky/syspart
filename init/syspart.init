#!/bin/sh
# Startup script for syspart
#
# chkconfig: 12345 0 99
# description: Partition system resources

# Source function library.
. /etc/rc.d/init.d/functions

# Init cpusets (mount, etc)
if [ ! -d /dev/cpuset ]; then 
	mkdir /dev/cpuset
	if ! mount -l | grep -q /dev/cpuset; then 
		mount -t cgroup -ocpuset cpuset /dev/cpuset
	fi
fi

cd /dev/cpuset

# The rest of the scripts assumes that current directory is 
# the root of the cpuset tree

# Get config.
[ -f /etc/sysconfig/syspart ] || exit 5
. /etc/sysconfig/syspart

# Compute masks based on the config
# All cpus in the system
ALL_CPUS_MASK=`cat cpuset.cpus | bitops --fmt=lX`

# PAR0 cpus and memory nodes
PAR0_CPUS_MASK=`echo $PAR0_CPUS | bitops --fmt=lX`
PAR0_CPUS_LIST=$PAR0_CPUS
PAR0_MEMS_LIST=$PAR0_MEMS

# PAR1 cpus
PAR1_CPUS_MASK=`echo $ALL_CPUS_MASK | bitops --andnot $PAR0_CPUS_MASK`
PAR1_EACH_CPU=`echo $PAR1_CPUS_MASK | bitops --fmt=xE`

# Check if task is pinned to a single CPU
task_not_pinned()
{
	a=`taskset -p $1 2>/dev/null` &&
		[ `echo $a | cut -d: -f2 | bitops -w` -gt 1 ]
}

# Create cpusets and move all the tasks
create_partitions()
{
	# Set default IRQ affinity if supported
	if [ -f /proc/irq/default_smp_affinity ]; then 
		echo $PAR0_CPUS_MASK > /proc/irq/default_smp_affinity
	fi

	# Set affinity for all active IRQs
	for i in /proc/irq/[0-9]*; do
		echo $PAR0_CPUS_MASK > $i/smp_affinity 2>/dev/null
	done

	# Disable systemwide load balancing
	echo 0 > cpuset.sched_load_balance

	# Bring PAR1 cpus offline
	for i in $PAR1_EACH_CPU; do
		echo 0 > /sys/devices/system/cpu/cpu$i/online
	done

	# Create par0 cpuset
	if [ ! -d par0 ]; then
		mkdir par0
		echo $PAR0_CPUS_LIST > par0/cpuset.cpus
		echo $PAR0_MEMS_LIST > par0/cpuset.mems
		echo 1 > par0/cpuset.cpu_exclusive
	fi

	# Move tasks into PAR0
	for t in `cat tasks`; do
		# Check if a task is pinned to a single CPU
		if task_not_pinned $t; then
			echo $t > par0/tasks 2>/dev/null
		fi
	done

	# Bring PAR1 cpus online
	for i in $PAR1_EACH_CPU; do
		echo 1 > /sys/devices/system/cpu/cpu$i/online
	done

	# Enable balancing in PAR0.
	# We do it as a last step to avoid redundant domain 
	# rebuilds.
	echo 1 > par0/cpuset.sched_load_balance
}

# Destory cpusets created for the system partitions
destroy_partitions()
{
	if [ -d par0 ]; then 
		# Move tasks to the root cpuset
		for t in `cat par0/tasks`; do
			echo $t > tasks 2>/dev/null
		done

		# Remove par0
		rmdir par0
	fi

	# Enable systemwide balancing
	echo 1 > cpuset.sched_load_balance

	# Set default IRQ affinity if supported
	if [ -f /proc/irq/default_smp_affinity ]; then 
		echo $ALL_CPUS_MASK > /proc/irq/default_smp_affinity
	fi

	# Set affinity for all active IRQs
	for i in /proc/irq/[0-9]*; do
		echo $ALL_CPUS_MASK > $i/smp_affinity 2>/dev/null
	done
}

start() {
	# Partition the system
	create_partitions

	RETVAL=0
	return $RETVAL 
}

stop() {
	# Revert all partitioning
	destroy_partitions

	RETVAL=0
	return $RETVAL 
}

case "$1" in
  start)
    start
    ;;

  stop)
    stop
    ;;

  status)
    ;;

  restart)
    stop
    start
    ;;

  condrestart)
    ;;

  *)
    echo $"Usage: $0 {start|stop|restart|condrestart|status}"
    exit 3
    ;;
esac

exit $RETVAL
