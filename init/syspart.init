#!/bin/sh
# Startup script for syspart
#
# chkconfig: 12345 90 99
# description: Partition system resources

# Source function library.
. /etc/rc.d/init.d/functions

# Get config.
[ -f /etc/sysconfig/syspart ] || exit 5
. /etc/sysconfig/syspart

# Init cpusets (mount, etc)
if [ ! -f /proc/1/cpuset ]; then
	echo CPUSETS support is not enabled
	exit 1
fi

if [ ! -d /dev/cpuset ]; then
	mkdir /dev/cpuset
	if ! mount -l | grep -q /dev/cpuset; then 
		mount -t cgroup -ocpuset cpuset /dev/cpuset || exit 1
	fi
fi

cd /dev/cpuset

# **** The rest of the script assumes that current directory is 
# **** the root of the cpuset tree

# Compute masks based on the config
# All cpus in the system
ALL_CPUS_MASK=`cat cpuset.cpus | bitops --fmt=lX`

# PAR0 cpus and memory nodes
PAR0_CPUS_MASK=`echo $PAR0_CPUS | bitops --fmt=lX`
PAR0_CPUS_LIST=$PAR0_CPUS
PAR0_MEMS_LIST=$PAR0_MEMS

# PAR1 cpus
PAR1_CPUS_MASK=`echo $ALL_CPUS_MASK | bitops --andnot $PAR0_CPUS_MASK`
PAR1_EACH_CPU=`echo $PAR1_CPUS_MASK | bitops --fmt=xE`

# Create cpusets and move all the tasks
create_partitions()
{
	# Set default IRQ affinity if supported
	if [ -f /proc/irq/default_smp_affinity ]; then 
		echo $PAR0_CPUS_MASK > /proc/irq/default_smp_affinity
	fi

	# Set affinity for all active IRQs
	for i in /proc/irq/[0-9]*; do
		echo $PAR0_CPUS_MASK > $i/smp_affinity 2>/dev/null
	done

	# Disable systemwide load balancing
	echo 0 > cpuset.sched_load_balance

	# Bring PAR1 cpus offline
	for i in $PAR1_EACH_CPU; do
		echo 0 > /sys/devices/system/cpu/cpu$i/online
	done

	# Create par0 cpuset
	if [ ! -d par0 ]; then
		mkdir par0
		echo $PAR0_CPUS_LIST > par0/cpuset.cpus
		echo $PAR0_MEMS_LIST > par0/cpuset.mems
		echo 1 > par0/cpuset.cpu_exclusive
	fi

	# Move tasks into PAR0
	cat /proc/[0-9]*/status 2>/dev/null |\
	    awk '/Name/{n=$2; u=0} /^Pid:/{p=$2} /VmSize/{u=1} /Cpus/{print n,p,u,$2}' |\
	while read name pid user cpus; do
		# All user-space tasks move, no exceptions
		if [ $user -eq 1 ]; then
			echo $pid >par0/tasks 2>/dev/null
			continue
		fi

		# Skip pinned down kernel threads
		[ `echo $cpus | bitops -w` -eq 1 ] && continue

		# Skip special kernel threads
		case $name in
		kthreadd)
			# Do not move kthreadd
			continue
			;;
		esac

		# Move the rest
		echo $pid >par0/tasks 2>/dev/null
	done

	# Bring PAR1 cpus online
	for i in $PAR1_EACH_CPU; do
		echo 1 > /sys/devices/system/cpu/cpu$i/online
	done

	# Enable balancing in PAR0.
	# We do it as a last step to avoid redundant domain 
	# rebuilds.
	echo 1 > par0/cpuset.sched_load_balance
}

# Destory cpusets created for the system partitions
destroy_partitions()
{
	if [ -d par0 ]; then 
		# Move tasks to the root cpuset
		while read t; do
			echo $t > tasks 2>/dev/null
		done < par0/tasks

		# Remove par0
		rmdir par0
	fi

	# Enable systemwide balancing
	echo 1 > cpuset.sched_load_balance

	# Set default IRQ affinity if supported
	if [ -f /proc/irq/default_smp_affinity ]; then 
		echo $ALL_CPUS_MASK > /proc/irq/default_smp_affinity
	fi

	# Set affinity for all active IRQs
	for i in /proc/irq/[0-9]*; do
		echo $ALL_CPUS_MASK > $i/smp_affinity 2>/dev/null
	done
}

start()
{
 	echo -n $"Starting syspart: "

	# Partition the system
	create_partitions

	success $"syspart"
	echo 

	RETVAL=0
	return $RETVAL
}

stop()
{
 	echo -n $"Stopping syspart: "

	# Revert the partitioning
	destroy_partitions

	success $"syspart"
	echo

	RETVAL=0
	return $RETVAL 
}

case "$1" in
  start)
    start
    ;;

  stop)
    stop
    ;;

  status)
    ;;

  restart)
    stop
    start
    ;;

  condrestart)
    ;;

  *)
    echo $"Usage: $0 {start|stop|restart|condrestart|status}"
    exit 3
    ;;
esac

exit $RETVAL
